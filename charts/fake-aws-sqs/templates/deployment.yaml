apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "fullname" . }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
    spec:
      containers:
      - name: fake-aws-sqs
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        ports:
        - containerPort: {{ .Values.service.httpPort }}
          name: http
          protocol: TCP
        volumeMounts:
        - name: storage
          mountPath: /data
        resources:
{{ toYaml .Values.resources | indent 12 }}
      - name: initiate-fake-aws-sqs
        image: mesosphere/aws-cli:1.14.5
        command: [/bin/sh]
        args:
        - -c
        - |
          exec_until_ready() {
              until $1; do echo 'service not ready yet'; sleep 1; done
          }
          queue_exists() {
              # NOTE: we use the '"' to match the queue name more exactly (otherwise there is some overlap)
              OUTPUT=$(aws --endpoint-url=http://localhost:{{ $.Values.service.httpPort }} sqs list-queues | grep $1'"' | wc -l)
              echo $OUTPUT
          }

          echo 'Creating AWS resources'
          aws configure set aws_access_key_id dummy
          aws configure set aws_secret_access_key dummy
          aws configure set region eu-west-1

          while true
          do
              # Recreate resources if needed
              {{ range $i, $queueName := .Values.queueNames }}
                  QUEUE=$(queue_exists "{{ $queueName }}")
                  if [ "$QUEUE" == "1" ]
                    then echo "Queue {{ $queueName }} exists, no need to re-create"
                    else exec_until_ready "aws --endpoint-url=http://localhost:{{ $.Values.service.httpPort }} sqs create-queue --queue-name {{ $queueName }}"
                  fi
              {{ end }}

              echo 'Sleeping 10'
              sleep 10
          done
      volumes:
        - emptyDir: {}
          name: "storage"
