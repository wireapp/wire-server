{{- if .Values.service.nginz.enabled }}
# This service has to be exposed using type `LoadBalancer` to ensure that there
# is no other pod between the load balancer and this service. This ensures that
# only thing which disrupts the websocket connection is when a cannon pod gets
# stopped. If, like other services we have a separate nginz and an
# ingress-controller between the load balancer and the service, stopping any of
# these pods would cause websockets to be disrupted.
#
# In the future, if desired, type=LoadBalancer could also become type=NodePort
# if this is needed on some environments without loadbalancer support.
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.service.nginz.name }}
  labels:
    app: cannon
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    service.kubernetes.io/topology-aware-hints: auto
    {{- if .Values.service.nginz.externalDNS.enabled }}
    external-dns.alpha.kubernetes.io/ttl: {{ .Values.service.nginz.externalDNS.ttl | quote }}
    external-dns.alpha.kubernetes.io/hostname: {{ required "Please provide .service.nginz.hostname when .service.nginz.enabled and .service.nginz.externalDNS.enabled are True" .Values.service.nginz.hostname | quote }}
    {{- end }}
{{ toYaml .Values.service.nginz.annotations | indent 4 }}
spec:
  type: LoadBalancer
  # This ensures websocket traffic does not go from one kubernetes node to
  # another, if that happened, restarting the originating kubernetes node would
  # cause all websocket connections to be severed at once.
  externalTrafficPolicy: "Local"
  ports:
    - name: http
      port: {{ .Values.service.nginz.externalPort }}
      targetPort: {{ .Values.service.nginz.internalPort }}
      protocol: TCP
  selector:
    app: cannon
    release: {{ .Release.Name }}
{{- end }}
