# Spins up pods with stable names; e.g. cannon-0 ... cannon-<replicaCount>
# Specific pods can be accessed within the cluster at cannon-<n>.cannon.<namespace>
# (the second 'cannon' is the name of the headless service)
# Note: In fact, cannon-<n>.cannon can also be used to access the service but assuming
# that we can have multiple namespaces accessing the same redis cluster, appending `.<namespace>`
# makes the service unambiguous
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cannon
  labels:
    app: cannon
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  serviceName: {{ .Values.service.name }}
  selector:
    matchLabels:
      app: cannon
  replicas: {{ .Values.replicaCount }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: cannon
        release: {{ .Release.Name }}
      annotations:
        checksum/configmap: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.service.nginz.enabled }}
        checksum/nginz-configmap: {{ include (print .Template.BasePath "/nginz-configmap.yaml") . | sha256sum }}
        {{- end }}
    spec:
      terminationGracePeriodSeconds: {{ add .Values.config.drainOpts.gracePeriodSeconds 5 }}
      containers:
      {{- if .Values.service.nginz.enabled }}
      - name: nginz
        image: "{{ .Values.nginzImage.repository }}:{{ .Values.nginzImage.tag }}"
        imagePullPolicy: "{{ .Values.nginzImage.pullPolicy }}"
        {{- if eq (include "includeSecurityContext" .) "true" }}
        securityContext:
          {{- toYaml .Values.podSecurityContext | nindent 10 }}
        {{- end }}
        env:
        # Any file changes to this path causes nginx to reload configs without
        # restarting or breaking any connections.
        - name: WATCH_PATHS
          value: "/etc/wire/nginz/tls"
        volumeMounts:
        - name: nginz-config
          mountPath: /etc/wire/nginz/conf
          readOnly: true
        - name: nginz-secrets
          mountPath: /etc/wire/nginz/secrets
          readOnly: true
        - name: certificate
          mountPath: /etc/wire/nginz/tls
          readOnly: true
        ports:
        - name: https
          containerPort: {{ .Values.service.nginz.internalPort }}
        readinessProbe:
          httpGet:
            path: /status
            port: {{ .Values.service.nginz.internalPort }}
            scheme: HTTPS
        livenessProbe:
          initialDelaySeconds: 30
          timeoutSeconds: 1
          httpGet:
            path: /status
            port: {{ .Values.service.nginz.internalPort }}
            scheme: HTTPS
        lifecycle:
          preStop:
            exec:
              # kubernetes by default sends a SIGTERM to the container,
              # which would cause nginz to exit, breaking existing websocket connections.
              # Instead we terminate gracefully and sleep given grace period + 5 seconds.
              # (SIGTERM is still sent, but afterwards)
              command: ["sh", "-c", "nginx -c /etc/wire/nginz/conf/nginx.conf -s quit && sleep {{ add .Values.config.drainOpts.gracePeriodSeconds 5 }}"]
        resources:
{{ toYaml .Values.resources | indent 12 }}
      {{- end }}
      - name: cannon
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        {{- if eq (include "includeSecurityContext" .) "true" }}
        securityContext:
          {{- toYaml .Values.podSecurityContext | nindent 10 }}
        {{- end }}
        volumeMounts:
        - name: empty
          mountPath: /etc/wire/cannon/externalHost
        - name: cannon-config
          mountPath: /etc/wire/cannon/conf
        ports:
        - name: http
          containerPort: {{ .Values.service.internalPort }}
        readinessProbe:
          httpGet:
            path: /i/status
            port: {{ .Values.service.internalPort }}
            scheme: HTTP
        livenessProbe:
          initialDelaySeconds: 30
          timeoutSeconds: 1
          httpGet:
            path: /i/status
            port: {{ .Values.service.internalPort }}
            scheme: HTTP
        resources:
{{ toYaml .Values.resources | indent 12 }}
      initContainers:
      - name: cannon-configurator
        image: alpine:3.18.2
        {{- if eq (include "includeSecurityContext" .) "true" }}
        securityContext:
          {{- toYaml .Values.podSecurityContext | nindent 10 }}
          runAsUser: 65534
        {{- end }}
        command:
        - /bin/sh
        args:
        - -c
        # e.g. cannon-0.cannon.production
        - echo "${HOSTNAME}.{{ .Values.service.name }}.{{ .Release.Namespace }}" > /etc/wire/cannon/externalHost/host.txt
        volumeMounts:
        - name: empty
          mountPath: /etc/wire/cannon/externalHost
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
      - name: cannon-config
        configMap:
          name: cannon
      - name: empty
        emptyDir: {}
      {{- if .Values.service.nginz.enabled }}
      - name: nginz-config
        configMap:
          name: cannon-nginz
      - name: nginz-secrets
        secret:
          secretName: cannon-nginz
      - name: certificate
        secret:
          secretName: {{ .Values.service.nginz.tls.secretName }}
      {{- end }}
