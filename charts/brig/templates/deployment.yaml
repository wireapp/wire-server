apiVersion: apps/v1
kind: Deployment
metadata:
  name: brig
  labels:
    app: brig
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  storageClassName: hcloud-volumes
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: brig
  template:
    metadata:
      labels:
        app: brig
        release: {{ .Release.Name }}
      annotations:
        # An annotation of the configmap checksum ensures changes to the configmap cause a redeployment upon `helm upgrade`
        checksum/configmap: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/turnconfigmap: {{ include (print .Template.BasePath "/turnconfigmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print .Template.BasePath "/secret.yaml") . | sha256sum }}
        fluentbit.io/parser: json
    spec:
      serviceAccountName: {{ .Values.serviceAccount.name }}
      volumes:
        - name: "brig-config"
          configMap:
            name: "brig"
        - name: "brig-secrets"
          secret:
            secretName: "brig"
        {{- if eq $.Values.turn.serversSource "files" }}
        - name: "turn-servers"
          configMap:
            name: "turn"
        {{- end }}
        {{- if eq (include "useCassandraTLS" .Values.config) "true" }}
        - name: "brig-cassandra"
          secret:
            secretName: {{ (include "tlsSecretRef" .Values.config | fromYaml).name }}
        {{- end}}
        {{- if eq (include "configureElasticSearchCa" .Values.config) "true" }}
        - name: "elasticsearch-ca"
          secret:
            secretName: {{ include "elasticsearchTlsSecretName" .Values.config }}
        {{- end }}
        {{- if eq (include "configureAdditionalElasticSearchCa" .Values.config) "true" }}
        - name: "additional-elasticsearch-ca"
          secret:
            secretName: {{ include "additionalElasticsearchTlsSecretName" .Values.config }}
        {{- end }}
        {{- if .Values.config.rabbitmq.tlsCaSecretRef }}
        - name: "rabbitmq-ca"
          secret:
            secretName: {{ .Values.config.rabbitmq.tlsCaSecretRef.name }}
        {{- end }}

      containers:
        - name: brig
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ default "" .Values.imagePullPolicy | quote }}
        {{- if eq (include "includeSecurityContext" .) "true" }}
          securityContext:
            {{- toYaml .Values.podSecurityContext | nindent 12 }}
        {{- end }}
          volumeMounts:
          - name: "brig-secrets"
            mountPath: "/etc/wire/brig/secrets"
          - name: "brig-config"
            mountPath: "/etc/wire/brig/conf"
          {{- if eq $.Values.turn.serversSource "files" }}
          - name: "turn-servers"
            mountPath: "/etc/wire/brig/turn"
          {{- end }}
          {{- if eq (include "useCassandraTLS" .Values.config) "true" }}
          - name: "brig-cassandra"
            mountPath: "/etc/wire/brig/cassandra"
          {{- end }}
          {{- if eq (include "configureElasticSearchCa" .Values.config) "true" }}
          - name: "elasticsearch-ca"
            mountPath: "/etc/wire/brig/elasticsearch-ca/"
          {{- end }}
          {{- if eq (include "configureAdditionalElasticSearchCa" .Values.config) "true" }}
          - name: "additional-elasticsearch-ca"
            mountPath: "/etc/wire/brig/additional-elasticsearch-ca/"
          {{- end }}
          {{- if .Values.config.rabbitmq.tlsCaSecretRef }}
          - name: "rabbitmq-ca"
            mountPath: "/etc/wire/brig/rabbitmq-ca/"
          {{- end }}
          env:
          - name: LOG_LEVEL
            value: {{ .Values.config.logLevel }}
          {{- if hasKey .Values.secrets "awsKeyId" }}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: brig
                key: awsKeyId
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: brig
                key: awsSecretKey
          {{- end }}
          # TODO: Is this the best way to do this?
          - name: AWS_REGION
            value: "{{ .Values.config.aws.region }}"
          {{- with .Values.config.proxy }}
          {{- if .httpProxy }}
          - name: http_proxy
            value: {{ .httpProxy | quote }}
          - name: HTTP_PROXY
            value: {{ .httpProxy | quote }}
          {{- end }}
          {{- if .httpsProxy }}
          - name: https_proxy
            value: {{ .httpsProxy | quote }}
          - name: HTTPS_PROXY
            value: {{ .httpsProxy | quote }}
          {{- end }}
          {{- if .noProxyList }}
          - name: no_proxy
            value: {{ join "," .noProxyList | quote }}
          - name: NO_PROXY
            value: {{ join "," .noProxyList | quote }}
          {{- end }}
          {{- end }}
          {{- if .Values.config.enableFederation }}
          - name: RABBITMQ_USERNAME
            valueFrom:
              secretKeyRef:
                name: brig
                key: rabbitmqUsername
          - name: RABBITMQ_PASSWORD
            valueFrom:
              secretKeyRef:
                name: brig
                key: rabbitmqPassword
          {{- end }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          startupProbe:
            httpGet:
              scheme: HTTP
              path: /i/status
              port: {{ .Values.service.internalPort }}
            failureThreshold: 6
            periodSeconds: 5
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /i/status
              port: {{ .Values.service.internalPort }}
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /i/status
              port: {{ .Values.service.internalPort }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
