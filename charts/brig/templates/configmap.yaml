apiVersion: v1
kind: ConfigMap
metadata:
  name: "brig"
  labels:
    app: brig
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  {{- with .Values.config }}
  brig.yaml: |
    logNetStrings: {{ .logNetStrings }}
    logFormat: {{ .logFormat }}
    logLevel: {{ .logLevel }}

    randomPrekeys: {{ .randomPrekeys }}

    brig:
      host: 0.0.0.0
      port: 8080

    cassandra:
      endpoint:
        host: {{ .cassandra.host }}
        port: 9042
      keyspace: brig
      {{- if hasKey .cassandra "filterNodesByDatacentre" }}
      filterNodesByDatacentre: {{ .cassandra.filterNodesByDatacentre }}
      {{- end }}

    elasticsearch:
      url: http://{{ .elasticsearch.host }}:{{ .elasticsearch.port }}
      index: {{ .elasticsearch.index }}
      {{- if .elasticsearch.additionalWriteIndex }}
      additionalWriteIndex: {{ .elasticsearch.additionalWriteIndex }}
      {{- end }}

    cargohold:
      host: cargohold
      port: 8080

    galley:
      host: galley
      port: 8080

    gundeck:
      host: gundeck
      port: 8080

    {{- if .enableFederator }}
    # TODO remove this
    federator:
      host: federator
      port: 8080

    federatorInternal:
      host: federator
      port: 8080
    {{- end }}

    {{- with .aws }}
    aws:
      prekeyTable: {{ .prekeyTable }}
      sqsEndpoint: {{ .sqsEndpoint | quote }}
      {{- if .dynamoDBEndpoint }}
      dynamoDBEndpoint: {{ .dynamoDBEndpoint | quote }}
      {{- end }}
      {{- if .userJournalQueue }}
      userJournalQueue: {{ .userJournalQueue | quote }}
      {{- end }}
    {{- end }}

    internalEvents:
      queueType: sqs
      queueName: {{ .aws.internalQueue }}

    emailSMS:
      email:
      {{- if .useSES }}
        sesQueue: {{ required "Missing value: brig.aws.sesQueue" .aws.sesQueue }}
        sesEndpoint: {{ .aws.sesEndpoint | quote }}
      {{- else }}
        smtpEndpoint:
          host: {{ .smtp.host }}
          port: {{ .smtp.port }}
        smtpConnType: {{ .smtp.connType }}
        {{- if .smtp.username }}
        smtpCredentials:
          smtpUsername: {{ .smtp.username }}
          smtpPassword: {{ .smtp.passwordFile }}
        {{- end }}
      {{- end }}
      general:
        templateDir: /usr/share/wire/templates
        emailSender: {{ .emailSMS.general.emailSender }}
        smsSender: {{ .emailSMS.general.smsSender | quote }}
        templateBranding:
          {{- with .emailSMS.general.templateBranding }}
          brand: {{ .brand }}
          brandUrl: {{ .brandUrl }}
          brandLabelUrl: {{ .brandLabelUrl }}
          brandLogoUrl: {{ .brandLogoUrl }}
          brandService: {{ .brandService }}
          copyright: {{ .copyright }}
          misuse: {{ .misuse }}
          legal: {{ .legal }}
          forgot: {{ .forgot }}
          support: {{ .support }}
          {{- end }}

      user:
      {{- if .emailSMS.user }}
        activationUrl: {{ .emailSMS.user.activationUrl }}
        smsActivationUrl: {{ .emailSMS.user.smsActivationUrl }}
        passwordResetUrl: {{ .emailSMS.user.passwordResetUrl }}
        {{- if .emailSMS.user.invitationUrl }}
        invitationUrl: {{ .emailSMS.user.invitationUrl }}
        {{- end }}
        deletionUrl: {{ .emailSMS.user.deletionUrl }}
      {{- else }}
        activationUrl: {{ .externalUrls.nginz }}/activate?key=${key}&code=${code}
        smsActivationUrl: {{ .externalUrls.nginz }}/v/${code}
        passwordResetUrl: {{ .externalUrls.nginz }}/password-reset/${key}?code=${code}
        invitationUrl: {{ .externalUrls.nginz }}/register?invitation_code=${code}
        deletionUrl: {{ .externalUrls.nginz }}/users/delete?key=${key}&code=${code}
      {{- end }}

      provider:
      {{- if .emailSMS.provider }}
        homeUrl: {{ .emailSMS.provider.homeUrl }}
        providerActivationUrl: {{ .emailSMS.provider.providerActivationUrl }}
        approvalUrl: {{ .emailSMS.provider.approvalUrl }}
        approvalTo: {{ .emailSMS.provider.approvalTo }}
        providerPwResetUrl: {{ .emailSMS.provider.providerPwResetUrl }}
      {{- else }}
        homeUrl: https://provider.localhost/
        providerActivationUrl: {{ .externalUrls.nginz }}/provider/activate?key=${key}&code=${code}
        approvalUrl: {{ .externalUrls.nginz }}/provider/approve?key=${key}&code=${code}
        approvalTo: success@simulator.amazonses.com
        providerPwResetUrl: {{ .externalUrls.nginz }}/provider/password-reset?key=\${key}\&code=\${code}
      {{- end }}

      team:
      {{- if .emailSMS.team }}
        tInvitationUrl: {{ .emailSMS.team.tInvitationUrl }}
        tActivationUrl: {{ .emailSMS.team.tActivationUrl }}
        tCreatorWelcomeUrl: {{ .emailSMS.team.tCreatorWelcomeUrl }}
        tMemberWelcomeUrl: {{ .emailSMS.team.tMemberWelcomeUrl }}
      {{- else }}
      {{- if .externalUrls.teamSettings }}
        tInvitationUrl: {{ .externalUrls.teamSettings }}/join/?team-code=${code}
      {{- else }}
        tInvitationUrl: {{ .externalUrls.nginz }}/register?team=${team}&team_code=${code}
      {{- end }}
        tActivationUrl: {{ .externalUrls.nginz }}/register?team=${team}&team_code=${code}
        tCreatorWelcomeUrl: {{ .externalUrls.teamCreatorWelcome }}
        tMemberWelcomeUrl: {{ .externalUrls.teamMemberWelcome }}
      {{- end }}

    zauth:
      privateKeys: /etc/wire/brig/secrets/secretkey.txt
      publicKeys: /etc/wire/brig/secrets/publickey.txt
      {{- with .authSettings }}
      authSettings:
        keyIndex: {{ .keyIndex }}
        userTokenTimeout: {{ .userTokenTimeout }}
        sessionTokenTimeout: {{ .sessionTokenTimeout }}
        accessTokenTimeout: {{ .accessTokenTimeout }}
        providerTokenTimeout: {{ .providerTokenTimeout }}
        legalHoldUserTokenTimeout: {{ .legalholdUserTokenTimeout }}
        legalHoldAccessTokenTimeout: {{ .legalholdAccessTokenTimeout }}
      {{- end }}

    turn:
      {{- if eq $.Values.turn.serversSource "dns" }}
      serversSource: dns
      baseDomain: {{ required ".turn.baseDomain must be configured if .turn.serversSource is set to dns" $.Values.turn.baseDomain  }}
      discoveryIntervalSeconds: {{ $.Values.turn.discoveryIntervalSeconds }}
      {{- else if eq $.Values.turn.serversSource "files" }}
      serversSource: files
      servers: /etc/wire/brig/turn/turn-servers.txt
      serversV2: /etc/wire/brig/turn/turn-servers-v2.txt
      {{- else }}
      {{- fail (cat "Invalid value for .turn.serversSource, expected dns or files, got: " $.Values.turn.serversSource) }}
      {{- end }}
      secret: /etc/wire/brig/secrets/turn-secret.txt
      configTTL: 3600 # 1 hour
      tokenTTL: 43200 # 12 hours

    {{- if .sft }}
    {{- with .sft }}
    sft:
      sftBaseDomain: {{ required "Missing value: .sft.sftBaseDomain" .sftBaseDomain }}
      {{- if .sftSRVServiceName }}
      sftSRVServiceName: {{ .sftSRVServiceName }}
      {{- end }}
      {{- if .sftDiscoveryIntervalSeconds }}
      sftDiscoveryIntervalSeconds: {{ .sftDiscoveryIntervalSeconds }}
      {{- end }}
    {{- end }}
    {{- end }}

    {{- if .geoip.enabled }}
    # Shared emptyDir with geoipupdate container
    geoDb: /usr/share/GeoIP/GeoIP2-City.mmdb
    {{- end }}

    {{- with .optSettings }}
    optSettings:
      setActivationTimeout: {{ .setActivationTimeout }}
      {{- if .setVerificationTimeout }}
      setVerificationTimeout: {{ .setVerificationTimeout }}
      {{- end }}
      setTeamInvitationTimeout: {{ .setTeamInvitationTimeout }}
      {{- if .setExpiredUserCleanupTimeout }}
      setExpiredUserCleanupTimeout: {{ .setExpiredUserCleanupTimeout }}
      {{- end }}
      setTwilio: /etc/wire/brig/secrets/twilio-credentials.yaml
      setNexmo: /etc/wire/brig/secrets/nexmo-credentials.yaml
      setUserMaxConnections: {{ .setUserMaxConnections }}
      setCookieInsecure: {{ .setCookieInsecure }}
      setUserCookieRenewAge: {{ .setUserCookieRenewAge }}
      setUserCookieLimit: {{ .setUserCookieLimit }}
      setUserCookieThrottle:
        stdDev: {{ .setUserCookieThrottle.stdDev }}
        retryAfter: {{ .setUserCookieThrottle.retryAfter }}
      {{- if .setLimitFailedLogins }}
      setLimitFailedLogins:
        timeout: {{ .setLimitFailedLogins.timeout }} # seconds.  if you reach the limit, how long do you have to wait to try again.
        retryLimit: {{ .setLimitFailedLogins.retryLimit }}  # how many times can you have a failed login in that timeframe.
      {{- end }}
      {{- if .setSuspendInactiveUsers }}
      setSuspendInactiveUsers:
        suspendTimeout: {{ .setSuspendInactiveUsers.suspendTimeout }}
      {{- end }}
      setRichInfoLimit: {{ .setRichInfoLimit }}
      {{- if .setDefaultUserLocale }}
      setDefaultUserLocale: {{ .setDefaultUserLocale }}
      {{- end }}
      setMaxTeamSize: {{ .setMaxTeamSize }}
      setMaxConvSize: {{ .setMaxConvSize }}
      setEmailVisibility: {{ .setEmailVisibility }}
      setPropertyMaxKeyLen: {{ .setPropertyMaxKeyLen }}
      setPropertyMaxValueLen: {{ .setPropertyMaxValueLen }}
      setDeleteThrottleMillis: {{ .setDeleteThrottleMillis }}
      setFederationDomain: {{ .setFederationDomain }}
      {{- if .setFederationDomainConfigs }}
      setFederationDomainConfigs: {{ toYaml .setFederationDomainConfigs | nindent 8 }}
      {{- end }}
      {{- if .setSearchSameTeamOnly }}
      setSearchSameTeamOnly: {{ .setSearchSameTeamOnly }}
      {{- end }}
      {{- if .setProviderSearchFilter }}
      setProviderSearchFilter: {{ .setProviderSearchFilter }}
      {{- end }}
      {{- if .setUserMaxPermClients }}
      setUserMaxPermClients: {{ .setUserMaxPermClients }}
      {{- end }}
      {{- if .setRestrictUserCreation }}
      setRestrictUserCreation: {{ .setRestrictUserCreation }}
      {{- end }}
      {{- if .setCustomerExtensions }}
      setCustomerExtensions:
        domainsBlockedForRegistration: {{ .setCustomerExtensions.domainsBlockedForRegistration }}
      {{- end }}
      {{- if .setSftStaticUrl }}
      setSftStaticUrl: {{ .setSftStaticUrl }}
      {{- end }}
      {{- if .setSftListAllServers }}
      setSftListAllServers: {{ .setSftListAllServers }}
      {{- end }}
      {{- if .setWhitelist }}
      setWhitelist: {{ toYaml .setWhitelist | nindent 8 }}
      {{- end }}
      {{- if .setFeatureFlags }}
      setFeatureFlags: {{ toYaml .setFeatureFlags | nindent 8 }}
      {{- end }}
      # Customer extensions. If this is not part of your contract with wire, use at your own risk!
      # Details: https://github.com/wireapp/wire-server/blob/3a21a82a1781f0d128f503df6a705b0b5f733d7b/services/brig/src/Brig/Options.hs#L465-L503
      {{- if .setCustomerExtensions }}
      setCustomerExtensions: {{ toYaml .setCustomerExtensions | nindent 8 }}
      {{- end }}
      {{- if .set2FACodeGenerationDelaySecs }}
      set2FACodeGenerationDelaySecs: {{ .set2FACodeGenerationDelaySecs }}
      {{- end }}
      {{- if .setNonceTtlSecs }}
      setNonceTtlSecs: {{ .setNonceTtlSecs }}
      {{- end }}
      {{- if .setDpopMaxSkewSecs }}
      setDpopMaxSkewSecs: {{ .setDpopMaxSkewSecs }}
      {{- end }}
      {{- if .setDpopTokenExpirationTimeSecs }}
      setDpopTokenExpirationTimeSecs: {{ .setDpopTokenExpirationTimeSecs }}
      {{- end }}
      {{- if $.Values.secrets.dpopSigKeyBundle }}
      setPublicKeyBundle: /etc/wire/brig/secrets/dpop_sig_key_bundle.pem
      {{- end }}
      {{- if .setEnableMLS }}
      setEnableMLS: {{ .setEnableMLS }}
      {{- end }}
      {{- if .setDisabledAPIVersions }}
      setDisabledAPIVersions: {{ .setDisabledAPIVersions }}
      {{- end }}
    {{- end }}
  {{- end }}
