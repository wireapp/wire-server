apiVersion: v1
kind: Pod
metadata:
  name: "{{ .Release.Name }}-integration-integration"
  annotations:
    "helm.sh/hook": test
  labels:
    app: integration-integration
    release: {{ .Release.Name }}
spec:
  volumes:
    - name: "integration-config"
      configMap:
        name: "integration-config"

    - name: "galley-config"
      configMap:
        name: "galley"

    - name: "galley-secrets"
      secret:
        secretName: "galley"

    - name: "brig-config"
      configMap:
        name: "brig"

    - name: "brig-secrets"
      secret:
        secretName: "brig"

    - name: "turn-servers"
      configMap:
        name: "turn"

    - name: "cannon-config"
      configMap:
        name: "cannon"

    - name: "gundeck-config"
      configMap:
        name: "gundeck"

    - name: "cargohold-config"
      configMap:
        name: "cargohold"

    - name: "spar-config"
      configMap:
        name: "spar"

    - name: "federator-config"
      configMap:
        name: "federator"

    - name: "federator-secrets"
      secret:
        secretName: "federator-certificate-secret"

    - name: "federator-ca"
      configMap:
        name: "federator-ca"
    - name: "background-worker-config"
      configMap:
        name: "background-worker"

    - name: "stern-config"
      configMap:
        name: "backoffice"

    - name: "nginz-config"
      configMap:
        name: "nginz"

    - name: "nginz-secrets"
      secret:
        secretName: "nginz"

    - name: elasticsearch-ca
      secret:
        secretName: {{ .Values.config.elasticsearch.tlsCaSecretRef.name }}

    - name: redis-ca
      secret:
        secretName: {{ .Values.config.redis.tlsCaSecretRef.name }}

    - name: rabbitmq-ca
      secret:
        secretName: {{ .Values.config.rabbitmq.tlsCaSecretRef.name }}

    {{- if eq (include "useCassandraTLS" .Values.config) "true" }}
    - name: integration-cassandra
      secret:
        secretName: {{ include "cassandraTlsSecretName" .Values.config }}
    {{- end }}
  restartPolicy: Never

  initContainers:
  - name: integration-setup
    image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        {{- if eq (include "includeSecurityContext" .) "true" }}
    securityContext:
      {{- toYaml .Values.podSecurityContext | nindent 6 }}
        {{- end }}
    volumeMounts:
      - name: elasticsearch-ca
        mountPath: "/certs/elasticsearch"
      {{- if eq (include "useCassandraTLS" .Values.config) "true" }}
      - name: "integration-cassandra"
        mountPath: "/certs/cassandra"
      {{- end }}
      - name: rabbitmq-ca
        mountPath: /certs/rabbitmq-ca
    env:
    - name: INTEGRATION_DYNAMIC_BACKENDS_POOLSIZE
      value: "{{ .Values.config.dynamicBackendsPoolsize }}"
    - name: AWS_ACCESS_KEY_ID
      value: "dummykey"
    - name: AWS_SECRET_ACCESS_KEY
      value: "dummysecret"
    - name: AWS_REGION
      value: "eu-west-1"
    - name: RABBITMQ_USERNAME
      valueFrom:
        secretKeyRef:
          name: brig
          key: rabbitmqUsername
    - name: RABBITMQ_PASSWORD
      valueFrom:
        secretKeyRef:
          name: brig
          key: rabbitmqPassword
    command:
      - /bin/sh
      - -c
      - |
        set -euo pipefail
        # FUTUREWORK: Do all of this in the integration test binary
        integration-dynamic-backends-db-schemas.sh \
          --host {{ .Values.config.cassandra.host }} \
          --port {{ .Values.config.cassandra.port }} \
          --replication-factor {{ .Values.config.cassandra.replicationFactor }} \
          {{- if eq (include "useCassandraTLS" .Values.config) "true" }}
          --tls-ca-certificate-file /certs/cassandra/{{- include "cassandraTlsSecretKey" .Values.config }}
          {{ end }}

        integration-dynamic-backends-brig-index.sh \
          --elasticsearch-server https://elastic:changeme@{{ .Values.config.elasticsearch.host }}:9200 \
          --elasticsearch-ca-cert /certs/elasticsearch/{{ .Values.config.elasticsearch.tlsCaSecretRef.key }}
        integration-dynamic-backends-ses.sh {{ .Values.config.sesEndpointUrl }}
        integration-dynamic-backends-s3.sh {{ .Values.config.s3EndpointUrl }}
        {{- range $name, $dynamicBackend := .Values.config.dynamicBackends }}
        integration-dynamic-backends-vhosts.sh {{ $.Values.config.rabbitmqPutVHostUrl }} {{ $dynamicBackend.federatorExternalHostPrefix}}.{{ $.Release.Namespace }}.svc.cluster.local
        {{- end }}
    resources:
      requests:
        memory: "512Mi"
        cpu: "2"

  containers:
  - name: integration
    image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        {{- if eq (include "includeSecurityContext" .) "true" }}
    securityContext:
      {{- toYaml .Values.podSecurityContext | nindent 6 }}
        {{- end }}
    command:
    - /bin/bash
    - -c
    - |
      set -euo pipefail

      if integration --config /etc/wire/integration/integration.yaml; then
        exit_code=$?
      else
        exit_code=$?
      fi

      {{- if .Values.config.uploadXml }}
      # In case a different S3 compliant storage is used to upload test result.
      if ! [[ -z "${UPLOAD_XML_AWS_ACCESS_KEY_ID+x}" ]]; then
        export AWS_ACCESS_KEY_ID="$UPLOAD_XML_AWS_ACCESS_KEY_ID"
        export AWS_SECRET_ACCESS_KEY="$UPLOAD_XML_AWS_SECRET_ACCESS_KEY"
      fi

      # The `|| echo ..` ensures that the test isn't seen as failed even if the upload fails.
      ts=$(date --utc '+%Y%m%d%H%M%S%N')
      aws s3 cp "$TEST_XML" "$UPLOAD_XML_S3_BASE_URL/integration/${ts}.xml" || echo "failed to upload result"
      {{- end }}

      exit $exit_code
    resources:
      requests:
        memory: "512Mi"
        cpu: "2"
    volumeMounts:

    - name: integration-config
      mountPath: /etc/wire/integration

    - name: galley-config
      mountPath: /etc/wire/galley/conf

    - name: galley-secrets
      mountPath: /etc/wire/galley/secrets

    - name: brig-config
      mountPath: /etc/wire/brig/conf

    - name: brig-secrets
      mountPath: /etc/wire/brig/secrets

    - name: turn-servers
      mountPath: /etc/wire/brig/turn

    - name: cannon-config
      mountPath: /etc/wire/cannon/conf

    - name: gundeck-config
      mountPath: /etc/wire/gundeck/conf

    - name: cargohold-config
      mountPath: /etc/wire/cargohold/conf

    - name: spar-config
      mountPath: /etc/wire/spar/conf

    - name: federator-config
      mountPath: /etc/wire/federator/conf

    - name: federator-secrets
      mountPath: /etc/wire/federator/secrets

    - name: federator-ca
      mountPath: /etc/wire/federator/ca

    - name: background-worker-config
      mountPath: /etc/wire/background-worker/conf

    - name: stern-config
      mountPath: /etc/wire/stern/conf

    - name: nginz-config
      mountPath: /etc/wire/nginz/conf

    - name: nginz-secrets
      mountPath: /etc/wire/nginz/secrets

    - name: elasticsearch-ca
      mountPath: /etc/wire/brig/elasticsearch-ca

    - name: redis-ca
      mountPath: /etc/wire/gundeck/redis-ca

    - name: rabbitmq-ca
      mountPath: /etc/wire/brig/rabbitmq-ca

    - name: rabbitmq-ca
      mountPath: /etc/wire/galley/rabbitmq-ca

    - name: rabbitmq-ca
      mountPath: /etc/wire/background-worker/rabbitmq-ca

    {{- if eq (include "useCassandraTLS" .Values.config) "true" }}
    - name: "integration-cassandra"
      mountPath: "/certs"

    - name: "integration-cassandra"
      mountPath: "/etc/wire/brig/cassandra"

    - name: "integration-cassandra"
      mountPath: "/etc/wire/galley/cassandra"

    - name: "integration-cassandra"
      mountPath: "/etc/wire/gundeck/cassandra"

    - name: "integration-cassandra"
      mountPath: "/etc/wire/spar/cassandra"
    {{- end }}

    env:
    # these dummy values are necessary for Amazonka's "Discover"
    - name: AWS_ACCESS_KEY_ID
      value: "dummykey"
    - name: AWS_SECRET_ACCESS_KEY
      value: "dummysecret"
    - name: AWS_REGION
      value: "eu-west-1"
    - name: RABBITMQ_USERNAME
      valueFrom:
        secretKeyRef:
          name: brig
          key: rabbitmqUsername
    - name: RABBITMQ_PASSWORD
      valueFrom:
        secretKeyRef:
          name: brig
          key: rabbitmqPassword
    {{- if hasKey .Values.secrets "redisUsername" }}
    - name: REDIS_USERNAME
      valueFrom:
        secretKeyRef:
          name: integration
          key: redisUsername
    {{- end }}
    {{- if hasKey .Values.secrets "redisPassword" }}
    - name: REDIS_PASSWORD
      valueFrom:
        secretKeyRef:
          name: integration
          key: redisPassword
    {{- end }}
    - name: TEST_XML
      value: /tmp/result.xml
    {{- if .Values.config.uploadXml }}
    - name: UPLOAD_XML_S3_BASE_URL
      value: {{ .Values.config.uploadXml.baseUrl }}
    {{- if .Values.secrets.uploadXmlAwsAccessKeyId }}
    - name: UPLOAD_XML_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: integration
          key: uploadXmlAwsAccessKeyId
    - name: UPLOAD_XML_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: integration
          key: uploadXmlAwsSecretAccessKey
    {{- end }}
    {{- end }}
