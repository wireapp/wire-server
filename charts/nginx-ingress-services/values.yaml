# Default values for nginx-ingress-services

# Team settings is disabled by default since it requires access to a private repo.
teamSettings:
  enabled: false
# Account pages may be useful to enable password reset or email validation done after the initial registration
accountPages:
  enabled: false
websockets:
  enabled: true
webapp:
  enabled: true
fakeS3:
  enabled: true
federator:
  enabled: false
  integrationTestHelper: false
# If you want to use TLS termination on the ingress,
# then set this variable to true and ensure that there
# is a valid wildcard TLS certificate
# When TLS is enable, ensure that you have the certificate
# and secret in a file under helm_vars/bare/secret.yaml (or
# another location) since enabling TLS requires you to supply
# a `tlsWildcardCert` and `tlsWildcardKey` (these will then be
# 64 encoded as part of the secret creation) so those values
# should simply contain the certificate and key (you can also
# encrypt them with sops and use helm-wrapper, check README.md
# for an example)
tls:
  enabled: true
  # NOTE:
  #  (1) enables automated certificate renewal provided by https://github.com/jetstack/cert-manager
  #  (2) supersedes wildcard certificate configuration mentioned above
  # IMPORTANT: requires cert-manager to be installed on the cluster beforehand, e.g.
  #            `helm upgrade --install -n cert-manager-ns --set 'installCRDs=true' cert-manager jetstack/cert-manager`
  #
  useCertManager: false
  # the validation depth between a federator client certificate and tlsClientCA
  verify_depth: 1
  createIssuer: true
  issuer:
    name: letsencrypt-http01
    kind: Issuer # Issuer | ClusterIssuer

certManager:
  # Indicates whether Letsencrypt's staging API server is used and therefore certificates are NOT trusted
  # default: production API server is used and certificates are trusted
  inTestMode: false
  # NOTE:
  #  (1) required to be set in values.yaml
  #  (2) used by Letsencrypt to send expiration notices and alike
  certmasterEmail:

  # List of acme.cert-manager.io/v1.ACMEChallengeSolver to be used instead of a
  # http01 nginx based solver. You can use secrets.certManager.customSolvers to
  # store a secret if customerSolvers requires one. The secret is named
  # "<release-name>-nginx-ingress-services-cert-manager-additional-solvers".
  #
  # Example:
  #
  # To use an additional DNS01 challenge solver on AWS use this.
  #
  # customSolvers:
  #
  #  - http01:
  #      ingress:
  #        class: nginx
  #  - dns01:
  #      route53:
  #        region: eu-west-1
  #        hostedZoneID: ...
  #        accessKeyID: ...
  #        secretAccessKeySecretRef:
  #          name: <release>-nginx-ingress-services-cert-manager-additional-solvers
  #          key: awsSecretAccessKey
  #
  #    selector:
  #      matchLabels:
  #        "use-route53-dns-solver": "true"
  customSolvers:

service:
  webapp:
    externalPort: 8080
  s3:
    externalPort: 9000
    serviceName: fake-aws-s3
    externallyCreated: false # See note below
  teamSettings:
    externalPort: 8080
  accountPages:
    externalPort: 8080

config:
  ingressClass: "nginx"
# You will need to supply some DNS names, namely
#   dns:
#     https: nginz-https.<domain>
#     ssl: nginz-ssl.<domain> # For websockets
#     ^ ssl is ignored if websockets.enabled == false
#     webapp: webapp.<domain>
#     ^ webapp is ignored if webapp.enabled == false
#     fakeS3: assets.<domain>
#     ^ fakeS3 is ignored if fakeS3.enabled == false
#     federator: federator.<domain>
#     ^ federator is ignored unless federator.enabled == true
#     teamSettings: teams.<domain>
#     ^ teamSettings is ignored unless teamSettings.enabled == true
#     accountPages: account.<domain>
#     ^ accountPages is ignored unless accountPages.enabled == true
# For TLS
# secrets:
#     tlsWildcardCert: |
#         -----BEGIN CERTIFICATE-----
#         -----END CERTIFICATE-----
#     tlsWildcardKey: |
#         -----BEGIN PRIVATE KEY-----
#         -----END PRIVATE KEY-----
#     tlsClientCA: |
#         -----BEGIN PRIVATE KEY-----
#         -----END PRIVATE KEY-----
#     ^ CA to use to verify client certificates.
#
# For Services:
# service:
#   s3:
#     externallyCreated: true
#     ^ externallyCreated might be useful if S3 access is provided by
#       an external service such as `minio-external`: in such cases
#       we do not want to create yet another service here but rather
#       use that service instead in the ingress
#     serviceName: minio-external
