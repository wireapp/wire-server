title: Federator to Ingress/Federator Flow

Brig @infra.a.com -> Federator @infra.a.com: (domain="b.com", component="brig", handle="alice")

Federator @infra.a.com -> DNS Resolver: DNS query: (service: "wire-server-federator", proto: "tcp", name: "b.com")

DNS Resolver -> Federator @infra.a.com: DNS response: (target: "infra.b.com")

Federator @infra.a.com -> Ingress @infra.b.com: mTLS session establishment

note:
Provides the Federator @infra.a.com client certificate.

Ingress @infra.b.com -> Federator @infra.a.com: mTLS session establishment response

note: The channel between infra.a.com and infra.b.com is now encrypted and mutually authenticated.

Federator @infra.a.com -> Ingress @infra.b.com: (originDomain="a.com", component="brig", path="get-user-by-handle", body="alice")

//group: TLS-secured backend-internal channel

Ingress @infra.b.com -> Federator @infra.b.com: (domain= "a.com", client_cert="<infra.a.com client cert>",  component="brig", path="get-user-by-handle", body="alice")


//end

Federator @infra.b.com -> DNS Resolver: DNS query: (service: "wire-server-federator", proto: "tcp", name: "a.com")

DNS Resolver -> Federator @infra.b.com: DNS response: (target: "infra.a.com")

//group: TLS-secured backend-internal channel

note: Check that the content of the _target_ field in the DNS response is one of the SANs in the client cert and that the content of the _domain_ field is on the allow list.

Federator @infra.b.com -> Brig @infra.b.com: (originDomain= "a.com", component="brig", path="federation/get-user-by-handle" handle="alice")


note: Perform per-request authorization.

Brig @infra.b.com -> Federator @infra.b.com: (UserProfile(Alice))

Federator @infra.b.com -> Ingress @infra.b.com: (UserProfile(Alice))

//end

Ingress @infra.b.com -> Federator @infra.a.com: (UserProfile(Alice))

note: Via the encrypted, mutually authenticated channel.

Federator @infra.a.com -> Brig @infra.a.com: (UserProfile(Alice))
