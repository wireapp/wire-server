From cd511178cdceec1a0757795dfc4a1104087a1b47 Mon Sep 17 00:00:00 2001
From: Paolo Capriotti <paolo@capriotti.io>
Date: Tue, 4 May 2021 17:47:02 +0200
Subject: [PATCH] Patch libraries for golden test generator

---
 libs/types-common/src/Data/Json/Util.hs       |  6 +++---
 .../src/Wire/API/Conversation/Role.hs         |  5 ++++-
 libs/wire-api/src/Wire/API/User/Identity.hs   |  6 +++---
 libs/wire-api/src/Wire/API/User/Profile.hs    |  9 +++++----
 libs/wire-api/test/unit/Main.hs               | 20 ++++---------------
 5 files changed, 19 insertions(+), 27 deletions(-)

diff --git a/libs/types-common/src/Data/Json/Util.hs b/libs/types-common/src/Data/Json/Util.hs
index b4a570018..6082910b5 100644
--- a/libs/types-common/src/Data/Json/Util.hs
+++ b/libs/types-common/src/Data/Json/Util.hs
@@ -84,6 +84,9 @@ newtype UTCTimeMillis = UTCTimeMillis {fromUTCTimeMillis :: UTCTime}
   deriving (Eq, Ord, Generic)
   deriving newtype (ToSchema)
 
+instance Show UTCTimeMillis where
+  show t = "(fromJust (readUTCTimeMillis " <> show (showUTCTimeMillis t) <> "))"
+
 {-# INLINE toUTCTimeMillis #-}
 toUTCTimeMillis :: HasCallStack => UTCTime -> UTCTimeMillis
 toUTCTimeMillis = UTCTimeMillis . (TL.seconds . coerced @Pico @_ @Integer %~ (* 1e9) . (`div` 1e9))
@@ -98,9 +101,6 @@ readUTCTimeMillis = fmap toUTCTimeMillis . parseTimeM True defaultTimeLocale for
 formatUTCTimeMillis :: String
 formatUTCTimeMillis = "%FT%T%QZ"
 
-instance Show UTCTimeMillis where
-  showsPrec d = showParen (d > 10) . showString . showUTCTimeMillis
-
 instance ToJSON UTCTimeMillis where
   toJSON = String . pack . showUTCTimeMillis
 
diff --git a/libs/wire-api/src/Wire/API/Conversation/Role.hs b/libs/wire-api/src/Wire/API/Conversation/Role.hs
index 68597c928..3f2a2fac2 100644
--- a/libs/wire-api/src/Wire/API/Conversation/Role.hs
+++ b/libs/wire-api/src/Wire/API/Conversation/Role.hs
@@ -166,9 +166,12 @@ instance FromJSON ConversationRolesList where
 -- and cannot be created by externals. Therefore, never
 -- expose this constructor outside of this module.
 newtype RoleName = RoleName {fromRoleName :: Text}
-  deriving stock (Eq, Show, Generic)
+  deriving stock (Eq, Generic)
   deriving newtype (ToJSON, ToByteString, Hashable)
 
+instance Show RoleName where
+  show (RoleName name) = "fromJust (parseRoleName " <> show name <> ")"
+
 instance FromByteString RoleName where
   parser = parser >>= maybe (fail "Invalid RoleName") return . parseRoleName
 
diff --git a/libs/wire-api/src/Wire/API/User/Identity.hs b/libs/wire-api/src/Wire/API/User/Identity.hs
index 7967fa9e4..504d292a2 100644
--- a/libs/wire-api/src/Wire/API/User/Identity.hs
+++ b/libs/wire-api/src/Wire/API/User/Identity.hs
@@ -143,13 +143,13 @@ data Email = Email
   { emailLocal :: Text,
     emailDomain :: Text
   }
-  deriving stock (Eq, Ord, Generic)
+  deriving stock (Eq, Ord, Generic, Show)
 
 instance ToSchema Email where
   declareNamedSchema _ = declareNamedSchema (Proxy @Text)
 
-instance Show Email where
-  show = Text.unpack . fromEmail
+-- instance Show Email where
+--   show = show . Text.unpack . fromEmail
 
 instance ToByteString Email where
   builder = builder . fromEmail
diff --git a/libs/wire-api/src/Wire/API/User/Profile.hs b/libs/wire-api/src/Wire/API/User/Profile.hs
index 9fc77aab5..960389971 100644
--- a/libs/wire-api/src/Wire/API/User/Profile.hs
+++ b/libs/wire-api/src/Wire/API/User/Profile.hs
@@ -203,7 +203,7 @@ data Locale = Locale
   { lLanguage :: Language,
     lCountry :: Maybe Country
   }
-  deriving stock (Eq, Ord, Generic)
+  deriving stock (Eq, Ord, Generic, Show)
   deriving (Arbitrary) via (GenericUniform Locale)
 
 instance ToSchema Locale where
@@ -218,8 +218,6 @@ instance FromJSON Locale where
 instance ToJSON Locale where
   toJSON = String . locToText
 
-instance Show Locale where
-  show = Text.unpack . locToText
 
 locToText :: Locale -> Text
 locToText (Locale l c) = lan2Text l <> maybe mempty (("-" <>) . con2Text) c
@@ -236,9 +234,12 @@ parseLocale = hush . parseOnly localeParser
 -- Language
 
 newtype Language = Language {fromLanguage :: ISO639_1}
-  deriving stock (Eq, Ord, Show, Generic)
+  deriving stock (Eq, Ord, Generic)
   deriving newtype (Arbitrary, ToSchema)
 
+instance Show Language where
+  show (Language l) = "Language Data.LanguageCodes." <> show l
+
 languageParser :: Parser Language
 languageParser = codeParser "language" $ fmap Language . checkAndConvert isLower
 
diff --git a/libs/wire-api/test/unit/Main.hs b/libs/wire-api/test/unit/Main.hs
index a3f583d5f..1deac023c 100644
--- a/libs/wire-api/test/unit/Main.hs
+++ b/libs/wire-api/test/unit/Main.hs
@@ -15,6 +15,8 @@
 -- You should have received a copy of the GNU Affero General Public License along
 -- with this program. If not, see <https://www.gnu.org/licenses/>.
 
+{-# OPTIONS_GHC -Wwarn #-}
+
 module Main
   ( main,
   )
@@ -31,21 +33,7 @@ import qualified Test.Wire.API.Team.Member as Team.Member
 import qualified Test.Wire.API.User as User
 import qualified Test.Wire.API.User.RichInfo as User.RichInfo
 import qualified Test.Wire.API.User.Search as User.Search
-import qualified Test.Wire.API.Golden.Generated as Golden.Generated
+import qualified Test.Wire.API.Golden.Generator as Golden.Generator
 
 main :: IO ()
-main =
-  defaultMain $
-    testGroup
-      "Tests"
-      [ Call.Config.tests,
-        Team.Member.tests,
-        User.tests,
-        User.Search.tests,
-        User.RichInfo.tests,
-        Roundtrip.Aeson.tests,
-        Roundtrip.ByteString.tests,
-        Swagger.tests,
-        Roundtrip.CSV.tests,
-        Golden.Generated.tests
-      ]
+main = Golden.Generator.generateTestModule
-- 
2.31.1

