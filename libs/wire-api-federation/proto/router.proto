syntax = "proto3";
package wire.federator;

// These definitions are part of the federation protocol.
//
// A component (e.g. 'brig') will send some data of type 'FederatedRequest' to
// the local 'federator' service. That federator will extract the domain from
// the 'FederatedRequest' to discover where to send some data of type 'Request' to.
// On the other end, the 'Request' will be converted to a 'Response'.

enum Component {
  Brig = 0;
}

message HTTPResponse {
    uint32 responseStatus = 1;
    bytes responseBody = 2;
}

message Response {
  oneof response {
    HTTPResponse httpResponse = 1;
    string err = 2;
  }
}

// the envelope thing which is sent from brig to local federator
message FederatedRequest {
  string domain = 1;
  Request request = 2;
}

// the federator will take out Request from the FederatedRequest Envelope, and
// forward the Request object to a federator on another backend (with the wish
// that this remote federator forwards this to its own local brig)
message Request {
  Component component = 1;
  Method method = 2;
  bytes path = 3;
  repeated QueryParam query = 4;
  bytes body = 5;
}

message QueryParam {
  bytes key = 1;
  bytes value = 2;
}

enum Method {
  GET = 0;
  POST = 1;
  HEAD = 2;
  PUT = 3;
  DELETE = 4;
  TRACE = 5;
  CONNECT = 6;
  OPTIONS = 7;
  PATCH = 8;
}

// The * part of the following network traffic:
// brig *-> federator -> federator -> brig
// FUTUREWORK(federation): better naming?
service Outward {
  rpc call (FederatedRequest) returns (Response);
}

// The * part of the following network traffic:
// Brig -> federator *-> federator -> brig
// FUTUREWORK(federation): better naming?
service Inward {
    // callLocal in haskell
  rpc call (Request) returns (Response);
}
