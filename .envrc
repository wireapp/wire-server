# Build a folder ./.env that contains the dev-shell which load all the right env
# vars.
#
# To speed up the nix evaluation, we only rebuild our environment when `./nix`
# or any of the `default.nix` files change. We do this by adding all these files
# to the nix store and using the store paths as a cache key.

store_paths=$(find . -name default.nix  | grep -v '^./nix' | grep -v '^./dist-newstyle' | xargs nix-store --add ./nix)
layout_dir=$(direnv_layout_dir)
env_dir=./.env

# The env_dir used to be a symlink to env in nix store, if it exists, delete it.
[[ ! -L "$env_dir" ]] || rm -f "$env_dir"

[[ -d "$layout_dir" ]] || mkdir -p "$layout_dir"

if [[ ! -d "$env_dir" || ! -f "$layout_dir/nix-rebuild" || "$store_paths" != $(< "$layout_dir/nix-rebuild" ) ]]; then

  [[ -d "$env_dir" ]] || mkdir -p "$env_dir"

  # this builds "wireServer.devShell" defined in ./nix/default.nix and outputs to ./.env
  nix-shell ./nix -A wireServer.devShell --run 'direnv dump bash' > "${env_dir}/dev-shell.sh"

  nix-build ./nix -A profileEnv --out-link "${env_dir}/profile-env"

  echo "$store_paths" > "$layout_dir/nix-rebuild"
fi

source_env "${env_dir}/dev-shell.sh"

# source .profile from `$env`. This sets NIX_PATH to pkgs defined in
# ./nix/default.nix. Tis is useful for nix tooling that runs inside this direnv,
# e.g. "nix-shell -p foo" will get "foo" for pkgs defined in ./nix/default.nix
[[ -f "${env_dir}/profile-env/.profile" ]] && source_env "${env_dir}/profile-env/.profile"

# allow local .envrc overrides
[[ -f .envrc.local ]] && source_env .envrc.local

# Locale
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
