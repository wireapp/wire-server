---
# This helfile is used for the setup of two ephemeral backends on kubernetes
# during integration testing (including federation integration tests spanning
# over 2 backends)
# This helmfile is used via the './hack/bin/integration-setup-federation.sh' via
# 'make kube-integration-setup', which set environment variables required here
# and generate some keys.

helmDefaults:
  wait: true
  timeout: 600
  devel: true
  createNamespace: true
environments:
  default:
    values:
      - ./helm_vars/common.yaml.gotmpl
      - imagePullPolicy: Always
      - storageClass: hcloud-volumes
      - cassandraHost: cassandra-ephemeral
      - useK8ssandraSSL:
          enabled: false
  default-ssl:
    values:
      - ./helm_vars/common.yaml.gotmpl
      - imagePullPolicy: Always
      - storageClass: hcloud-volumes
      - cassandraHost: k8ssandra-cluster-datacenter-1-service
      - useK8ssandraSSL:
          enabled: true
  kind:
    values:
      - ./helm_vars/common.yaml.gotmpl
      - imagePullPolicy: Never
      - storageClass: standard
      - cassandraHost: cassandra-ephemeral
      - useK8ssandraSSL:
          enabled: false
  kind-ssl:
    values:
      - ./helm_vars/common.yaml.gotmpl
      - imagePullPolicy: Never
      - storageClass: standard
      - cassandraHost: k8ssandra-cluster-datacenter-1-service
      - useK8ssandraSSL:
          enabled: true
---
repositories:
  - name: stable
    url: 'https://charts.helm.sh/stable'

  - name: bitnami
    url: 'https://charts.bitnami.com/bitnami'

  - name: ingress
    url: 'https://kubernetes.github.io/ingress-nginx'

  - name: bedag
    url: 'https://bedag.github.io/helm-charts/'

  - name: opensearch
    url: 'https://opensearch-project.github.io/helm-charts/'

releases:
  - name: 'fake-aws'
    namespace: '{{ .Values.namespace1 }}'
    chart: '../.local/charts/fake-aws'
    values:
      - './helm_vars/fake-aws/values.yaml'

  - name: 'fake-aws'
    namespace: '{{ .Values.namespace2 }}'
    chart: '../.local/charts/fake-aws'
    values:
      - './helm_vars/fake-aws/values.yaml'

  - name: 'certs'
    namespace: '{{ .Values.namespace1 }}'
    chart: bedag/raw
    values:
      - './helm_vars/certs/values.yaml.gotmpl'

  - name: 'redis-ephemeral'
    namespace: '{{ .Values.namespace1 }}'
    chart: '../.local/charts/redis-ephemeral'
    values:
      - redis-ephemeral:
          usePassword: true
          password: very-secure-redis-master-password
          tls:
            enabled: true
            certificatesSecret: redis-certificate
            certFilename: "tls.crt"
            certKeyFilename: "tls.key"
            certCAFilename: "ca.crt"
            authClients: false
    needs:
      - certs

  - name: 'cassandra-ephemeral'
    namespace: '{{ .Values.namespace1 }}'
    chart: '../.local/charts/cassandra-ephemeral'

  - name: 'opensearch-ephemeral'
    namespace: '{{ .Values.namespace1 }}'
    chart: 'opensearch/opensearch'
    version: "2.25.0"
    values:
      - singleNode: true

      - extraObjects:
        - apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: opensearch-cert
            namespace: {{ .Values.namespace1 }}
            labels:
              chart: "opensearch-2.25.0"
              release: "opensearch-ephemeral"
              heritage: "Helm"
          spec:
            issuerRef:
              name: elasticsearch
              kind: Issuer

            usages:
              - server auth
              - client auth
            duration: 2160h     # 90d
            renewBefore: 360h   # 15d
            isCA: false
            secretName: opensearch-ephemeral-certificate

            # TODO: Wrong algorithm
            privateKey:
              algorithm: RSA
              encoding: PKCS8
              size: 2048
#            privateKey:
#              algorithm: ECDSA
#              size: 384
#              encoding: PKCS8
              rotationPolicy: Always

            dnsNames:
            - opensearch-cluster-master
            - opensearch-cluster-master.{{ .Values.namespace1 }}.svc.cluster.local

            commonName: opensearch-cluster-master

#      - podSecurityPolicy:
#        create: false
#        name: ""
#        spec:
#          privileged: true
#          fsGroup:
#            rule: RunAsAny
#          runAsUser:
#            rule: RunAsAny
#          seLinux:
#            rule: RunAsAny
#          supplementalGroups:
#            rule: RunAsAny
#          volumes:
#            - secret
#            - configMap
#            - persistentVolumeClaim
#            - emptyDir

      - opensearchHome: /usr/share/opensearch
      - config:
          opensearch.yml: |
            cluster.name: opensearch-cluster

            # Bind to all interfaces because we don't know what IP address Docker will assign to us.
            network.host: 0.0.0.0

            # Setting network.host to a non-loopback address enables the annoying bootstrap checks. "Single-node" mode disables them again.
            # Implicitly done if ".singleNode" is set to "true".
            discovery.type: single-node

            # Start OpenSearch Security Demo Configuration
            # WARNING: revise all the lines below before you go into production
            plugins:
              security:
                nodes_dn:
                  - '/CN=opensearch-cluster-master.*/'
                ssl:
                  transport:
                    pemcert_filepath: esnode.pem
                    pemkey_filepath: esnode-key.pem
                    pemtrustedcas_filepath: root-ca.pem
                    enforce_hostname_verification: false
                  http:
                    enabled: true
                    pemcert_filepath: esnode.pem
                    pemkey_filepath: esnode-key.pem
                    pemtrustedcas_filepath: root-ca.pem
                allow_unsafe_democertificates: true
                allow_default_init_securityindex: true
                # authcz:
                #   admin_dn:
                #     - CN=kirk,OU=client,O=client,L=test,C=de
                audit.type: internal_opensearch
                enable_snapshot_restore_privilege: true
                check_snapshot_restore_write_privileges: true
                restapi:
                  roles_enabled: ["all_access", "security_rest_api_access"]
                system_indices:
                  enabled: true
                  indices:
                    [
                      ".opendistro-alerting-config",
                      ".opendistro-alerting-alert*",
                      ".opendistro-anomaly-results*",
                      ".opendistro-anomaly-detector*",
                      ".opendistro-anomaly-checkpoints",
                      ".opendistro-anomaly-detection-state",
                      ".opendistro-reports-*",
                      ".opendistro-notifications-*",
                      ".opendistro-notebooks",
                      ".opendistro-asynchronous-search-response*",
                    ]
      - extraEnvs:
        - name: OPENSEARCH_USERNAME
          value: elastic
        - name: OPENSEARCH_PASSWORD
          value: changeme
        - name: OPENSEARCH_INITIAL_ADMIN_PASSWORD
          value: "Ch4ng3m3Secr3t!"
        - name: DISABLE_INSTALL_DEMO_CONFIG
          value: "true"

      - persistence:
          enabled: false

      - secretMounts:
        - name: node-pem
          secretName: opensearch-ephemeral-certificate
          path: /usr/share/opensearch/config/esnode.pem
          subPath: tls.crt

        - name: node-key
          secretName: opensearch-ephemeral-certificate
          path: /usr/share/opensearch/config/esnode-key.pem
          subPath: tls.key

        - name: root-cacert
          secretName: opensearch-ephemeral-certificate
          path: /usr/share/opensearch/config/root-ca.pem
          subPath: ca.crt

#        - name: tls-key
#          secretName: opensearch-ephemeral-certificate
#          path: /usr/share/opensearch/config/tls.key
#          subpath: tls.key


  # Required for testing redis migration
  - name: 'redis-ephemeral-2'
    namespace: '{{ .Values.namespace1 }}'
    chart: '../.local/charts/redis-ephemeral'
    values:
      - redis-ephemeral:
          nameOverride: redis-ephemeral-2
          usePassword: true
          password: very-secure-redis-master-password-2

  - name: 'certs'
    namespace: '{{ .Values.namespace2 }}'
    chart: bedag/raw
    values:
      - './helm_vars/certs/values.yaml.gotmpl'

  - name: 'databases-ephemeral'
    namespace: '{{ .Values.namespace2 }}'
    chart: '../.local/charts/databases-ephemeral'
    values:
      - redis-ephemeral:
          redis-ephemeral:
            usePassword: true
            password: very-secure-redis-master-password
            tls:
              enabled: true
              certificatesSecret: redis-certificate
              certFilename: "tls.crt"
              certKeyFilename: "tls.key"
              certCAFilename: "ca.crt"
              authClients: false
        elasticsearch-ephemeral:
          tls:
            enabled: true
            issuerRef:
              name: elasticsearch
              kind: Issuer
    needs:
      - certs

  - name: k8ssandra-test-cluster
    chart: '../.local/charts/k8ssandra-test-cluster'
    namespace: '{{ .Values.namespace1 }}'
    values:
      - './helm_vars/k8ssandra-test-cluster/values.yaml.gotmpl'
    condition: useK8ssandraSSL.enabled

  - name: k8ssandra-test-cluster
    chart: '../.local/charts/k8ssandra-test-cluster'
    namespace: '{{ .Values.namespace2 }}'
    values:
      - './helm_vars/k8ssandra-test-cluster/values.yaml.gotmpl'
    condition: useK8ssandraSSL.enabled

  - name: 'rabbitmq'
    namespace: '{{ .Values.namespace1 }}'
    chart: '../.local/charts/rabbitmq'
    values:
      - './helm_vars/rabbitmq/values.yaml.gotmpl'

  - name: 'rabbitmq'
    namespace: '{{ .Values.namespace2 }}'
    chart: '../.local/charts/rabbitmq'
    values:
      - './helm_vars/rabbitmq/values.yaml.gotmpl'

  - name: 'ingress'
    namespace: '{{ .Values.namespace1 }}'
    chart: '../.local/charts/{{ .Values.ingressChart }}'
    values:
      - './helm_vars/{{ .Values.ingressChart }}/values.yaml.gotmpl'

  - name: 'ingress'
    namespace: '{{ .Values.namespace2 }}'
    chart: '../.local/charts/{{ .Values.ingressChart }}'
    values:
      - './helm_vars/{{ .Values.ingressChart }}/values.yaml.gotmpl'

  - name: 'ingress-svc'
    namespace: '{{ .Values.namespace1 }}'
    chart: '../.local/charts/nginx-ingress-services'
    values:
      - './helm_vars/nginx-ingress-services/values.yaml.gotmpl'
    set:
      # Federation domain is also the SRV record created by the
      # federation-test-helper service. Maybe we can find a way to make these
      # differ, so we don't make any silly assumptions in the code.
      - name: config.dns.federator
        value: '{{ .Values.federationDomain1 }}'
      - name: config.dns.certificateDomain
        value: '*.{{ .Values.federationDomainBase1 }}'
    needs:
      - 'ingress'

  - name: 'ingress-svc'
    namespace: '{{ .Values.namespace2 }}'
    chart: '../.local/charts/nginx-ingress-services'
    values:
      - './helm_vars/nginx-ingress-services/values.yaml.gotmpl'
    set:
      # Federation domain is also the SRV record created by the
      # federation-test-helper service. Maybe we can find a way to make these
      # differ, so we don't make any silly assumptions in the code.
      - name: config.dns.federator
        value: '{{ .Values.federationDomain2 }}'
      - name: config.dns.certificateDomain
        value: '*.{{ .Values.federationDomainBase2 }}'
    needs:
      - 'ingress'

  # Note that wire-server depends on databases-ephemeral being up; and in some
  # cases on nginx-ingress also being up. If installing helm charts in a
  # parallel way, it's expected to see some wire-server pods (namely the
  # cassandra-migration one) fail and get restarted a few times)

  - name: 'wire-server'
    namespace: '{{ .Values.namespace1 }}'
    chart: '../.local/charts/wire-server'
    values:
      - './helm_vars/wire-server/values.yaml.gotmpl'
      - './helm_vars/wire-server/values-domain1.yaml.gotmpl'
    set:
      - name: brig.config.optSettings.setFederationDomain
        value: {{ .Values.federationDomain1 }}
      - name: galley.config.settings.federationDomain
        value: {{ .Values.federationDomain1 }}
      - name: cargohold.config.settings.federationDomain
        value: {{ .Values.federationDomain1 }}
    needs:
      - 'opensearch-ephemeral'
      - 'cassandra-ephemeral'
      - 'redis-ephemeral'

  - name: 'wire-server'
    namespace: '{{ .Values.namespace2 }}'
    chart: '../.local/charts/wire-server'
    values:
      - './helm_vars/wire-server/values.yaml.gotmpl'
      - './helm_vars/wire-server/values-domain2.yaml.gotmpl'
    set:
      - name: brig.config.optSettings.setFederationDomain
        value: {{ .Values.federationDomain2 }}
      - name: galley.config.settings.federationDomain
        value: {{ .Values.federationDomain2 }}
      - name: cargohold.config.settings.federationDomain
        value: {{ .Values.federationDomain2 }}
    needs:
      - 'databases-ephemeral'
