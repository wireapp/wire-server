tags:
  nginz: true
  brig: true
  galley: true
  gundeck: true
  cannon: true
  cargohold: true
  spar: true
  federation: true # also see {background-worker,brig,cargohold,galley}.config.enableFederation
  backoffice: true
  proxy: false
  legalhold: false
  sftd: false
  integration: true

cassandra-migrations:
  imagePullPolicy: {{ .Values.imagePullPolicy }}
  cassandra:
    host: {{ .Values.cassandraHost }}
    replicationFactor: 1
    {{- if .Values.useK8ssandraSSL.enabled }}
    tlsCaSecretRef:
        name: "cassandra-jks-keystore"
        key: "ca.crt"
    {{- end }}

elasticsearch-index:
  imagePullPolicy: {{ .Values.imagePullPolicy }}
  elasticsearch:
    scheme: https
    host: elasticsearch-ephemeral
    index: directory_test
    tlsCaSecretRef:
      name: "elasticsearch-ephemeral-certificate"
      key: "ca.crt"
  cassandra:
    host: {{ .Values.cassandraHost }}
    {{- if .Values.useK8ssandraSSL.enabled }}
    tlsCaSecretRef:
        name: "cassandra-jks-keystore"
        key: "ca.crt"
    {{- end }}
  secrets:
    elasticsearch:
      username: "elastic"
      password: "changeme"

brig:
  replicaCount: 1
  imagePullPolicy: {{ .Values.imagePullPolicy }}
  resources:
    requests: {}
    limits:
      memory: 1Gi
  config:
    externalUrls:
      nginz: https://kube-staging-nginz-https.zinfra.io
      teamCreatorWelcome: https://teams.wire.com/login
      teamMemberWelcome: https://wire.com/download
    cassandra:
      host: {{ .Values.cassandraHost }}
      replicaCount: 1
    {{- if .Values.useK8ssandraSSL.enabled }}
      tlsCaSecretRef:
          name: "cassandra-jks-keystore"
          key: "ca.crt"
    {{- end }}
    elasticsearch:
      scheme: https
      host: elasticsearch-ephemeral
      index: directory_test
      tlsCaSecretRef:
        name: "elasticsearch-ephemeral-certificate"
        key: "ca.crt"
      additionalTlsCaSecretRef:
        name: "elasticsearch-ephemeral-certificate"
        key: "ca.crt"
    rabbitmq:
      port: 5671
      enableTls: true
      insecureSkipVerifyTls: false
      tlsCaSecretRef:
        name: rabbitmq-certificate
        key: "ca.crt"
    authSettings:
      userTokenTimeout: 120
      sessionTokenTimeout: 20
      accessTokenTimeout: 30
      providerTokenTimeout: 60
    enableFederation: true # keep in sync with galley.config.enableFederation, cargohold.config.enableFederation and tags.federator!
    multiSFT:
      enabled: false # keep multiSFT default in sync with brig and sft chart's config.multiSFT
    optSettings:
      setActivationTimeout: 10
      setVerificationTimeout: 10
      # keep this in sync with brigSettingsTeamInvitationTimeout in spar/templates/tests/configmap.yaml
      setTeamInvitationTimeout: 10
      setExpiredUserCleanupTimeout: 1
      setUserMaxConnections: 16
      setCookieInsecure: true
      setUserCookieRenewAge: 2
      setUserCookieLimit: 5
      setUserCookieThrottle:
        stdDev: 5
        retryAfter: 5
      setLimitFailedLogins:
        timeout: 5  # seconds.  if you reach the limit, how long do you have to wait to try again.
        retryLimit: 5  # how many times can you have a failed login in that timeframe.
      setSuspendInactiveUsers:
        suspendTimeout: 10
      setDefaultTemplateLocale: en
      setDefaultUserLocale: en
      setMaxConvAndTeamSize: 16
      setMaxTeamSize: 32
      setMaxConvSize: 16
      # See helmfile for the real value
      setFederationDomain: integration.example.com
      setFeatureFlags:
        conferenceCalling:
          defaultForNew:
            status: disabled
          defaultForNull:
            status: disabled
      setFederationStrategy: allowAll
      setFederationDomainConfigsUpdateFreq: 10
      setDisabledAPIVersions: []
      set2FACodeGenerationDelaySecs: 5
      setNonceTtlSecs: 300
      setDpopMaxSkewSecs: 1
      setDpopTokenExpirationTimeSecs: 300
      setEnableMLS: true
      setOAuthAuthCodeExpirationTimeSecs: 3 # 3 secs
      setOAuthAccessTokenExpirationTimeSecs: 3 # 3 secs
      setOAuthEnabled: true
      setOAuthRefreshTokenExpirationTimeSecs: 14515200 # 24 weeks
      setOAuthMaxActiveRefreshTokens: 10
    aws:
      sesEndpoint: http://fake-aws-ses:4569
      sqsEndpoint: http://fake-aws-sqs:4568
      dynamoDBEndpoint: http://fake-aws-dynamodb:4567
      sesQueue: integration-brig-events
      internalQueue: integration-brig-events-internal
      prekeyTable: integration-brig-prekeys
    emailSMS:
      general:
        emailSender: backend-integrationk8s@wire.com
        smsSender: dummy
  secrets:
    # these secrets are only used during integration tests and should therefore be safe to include unencrypted in git.
    # Normally these would live in a separately-encrypted secrets.yaml file and incorporated using the helm secrets plugin (wrapper around mozilla sops)
    zAuth:
      privateKeys: 7owt9MgvLd3D1nQ5s5Zm-5kOiUZcJ_iqASOYdzLUpjHRRbfyx7XJ6hzltU0S9_kvKsdYZmTK9wZNWKUraB4Z1Q==
      publicKeys: 0UW38se1yeoc5bVNEvf5LyrHWGZkyvcGTVilK2geGdU=
    turn:
      secret: rPrUbws7PQZlfN2GG8Ggi7g5iOYPk7BiCoKHl3VoFZ
    awsKeyId: dummykey
    awsSecretKey: dummysecret
    smtpPassword: dummy-smtp-password
    dpopSigKeyBundle: |
      -----BEGIN PRIVATE KEY-----
      MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgokD9kGYErMooLqpv
      IRUVCtV1l6HmtqTJUFun0/4XLuahRANCAASWH/qkgOLwZz1GvEt0ch4HPRQUoj9U
      TL8L7QANF9JztsEQ2omrX9l7RoosjAm+PKwrL+c3GiT63CSd1qrUpoZa
      -----END PRIVATE KEY-----
    oauthJwkKeyPair: |
      {
        "kty": "OKP",
        "crv": "Ed25519",
        "x": "mhP-NgFw3ifIXGZqJVB0kemt9L3BtD5P8q4Gah4Iklc",
        "d": "R8-pV2-sPN7dykV8HFJ73S64F3kMHTNnJiSN8UdWk_o"
      }
    rabbitmq:
      username: {{ .Values.rabbitmqUsername }}
      password: {{ .Values.rabbitmqPassword }}
    elasticsearch:
      username: "elastic"
      password: "changeme"
    elasticsearchAdditional:
      username: "elastic"
      password: "changeme"
  tests:
    enableFederationTests: true
    {{- if .Values.uploadXml }}
    config:
      uploadXml:
        baseUrl: {{ .Values.uploadXml.baseUrl }}
    secrets:
      uploadXmlAwsAccessKeyId: {{ .Values.uploadXml.awsAccessKeyId }}
      uploadXmlAwsSecretAccessKey: {{ .Values.uploadXml.awsSecretAccessKey }}
    {{- end }}

cannon:
  replicaCount: 2
  imagePullPolicy: {{ .Values.imagePullPolicy }}
  resources:
    requests: {}
    limits:
      memory: 512Mi
  drainTimeout: 0
  config:
    disabledAPIVersions: []
cargohold:
  replicaCount: 1
  imagePullPolicy: {{ .Values.imagePullPolicy }}
  resources:
    requests: {}
    limits:
      memory: 512Mi
  config:
    aws:
      s3Bucket: dummy-bucket
      s3Endpoint: http://fake-aws-s3:9000
    enableFederation: true # keep in sync with brig.config.enableFederation, galley.config.enableFederation and tags.federator!
    settings:
      # See helmfile for the real value
      federationDomain: integration.example.com
      disabledAPIVersions: []
  secrets:
    awsKeyId: dummykey
    awsSecretKey: dummysecret
  tests:
    {{- if .Values.uploadXml }}
    config:
      uploadXml:
        baseUrl: {{ .Values.uploadXml.baseUrl }}
    secrets:
      uploadXmlAwsAccessKeyId: {{ .Values.uploadXml.awsAccessKeyId }}
      uploadXmlAwsSecretAccessKey: {{ .Values.uploadXml.awsSecretAccessKey }}
    {{- end }}

galley:
  replicaCount: 1
  imagePullPolicy: {{ .Values.imagePullPolicy }}
  config:
    cassandra:
      host: {{ .Values.cassandraHost }}
      replicaCount: 1
    {{- if .Values.useK8ssandraSSL.enabled }}
      tlsCaSecretRef:
          name: "cassandra-jks-keystore"
          key: "ca.crt"
    {{- end }}
    rabbitmq:
      port: 5671
      enableTls: true
      insecureSkipVerifyTls: false
      tlsCaSecretRef:
        name: rabbitmq-certificate
        key: "ca.crt"
    enableFederation: true # keep in sync with brig.config.enableFederation, cargohold.config.enableFederation and tags.federator!
    settings:
      maxConvAndTeamSize: 16
      maxTeamSize: 32
      maxFanoutSize: 18
      maxConvSize: 16
      conversationCodeURI: https://kube-staging-nginz-https.zinfra.io/conversation-join/
      # See helmfile for the real value
      federationDomain: integration.example.com
      disabledAPIVersions: []

      featureFlags:
        sso: disabled-by-default  # this needs to be the default; tests can enable it when needed.
        legalhold: whitelist-teams-and-implicit-consent
        teamSearchVisibility: disabled-by-default
        conferenceCalling:
          defaults:
            status: disabled
        classifiedDomains:
          status: enabled
          config:
            domains: ["example.com"]
        enforceFileDownloadLocation:
          defaults:
            status: disabled
            lockStatus: unlocked
            config:
              enforcedDownloadLocation: "downloads"
        mlsMigration:
          defaults:
            status: enabled
            config:
              startTime: "2029-05-16T10:11:12.123Z"
              finaliseRegardlessAfter: "2029-10-17T00:00:00.000Z"
              usersThreshold: 100
              clientsThreshold: 50
            lockStatus: locked
        mlsE2EId:
          defaults:
            status: disabled
            config:
              verificationExpiration: 86400
              acmeDiscoveryUrl: null
              crlProxy: https://crlproxy.example.com
            lockStatus: unlocked
        limitedEventFanout:
            defaults:
            status: disabled
    journal:
      endpoint: http://fake-aws-sqs:4568
      queueName: integration-team-events.fifo
  secrets:
    awsKeyId: dummykey
    awsSecretKey: dummysecret
    mlsPrivateKeys:
      removal:
        ed25519: |
          -----BEGIN PRIVATE KEY-----
          MC4CAQAwBQYDK2VwBCIEIAocCDXsKIAjb65gOUn5vEF0RIKnVJkKR4ebQzuZ709c
          -----END PRIVATE KEY-----
        ecdsa_secp256r1_sha256: |
          -----BEGIN PRIVATE KEY-----
          MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQg3qjgQ9U+/rTBObn9
          tXSVi2UtHksRDXmQ1VOszFZfjryhRANCAATNkLmZZLyORf5D3PUOxt+rkJTE5vuD
          aCqZ7sE5NSN8InRRwuQ1kv0oblDVeQA89ZlHqyxx75JPK+/air7Z1n5I
          -----END PRIVATE KEY-----
        ecdsa_secp384r1_sha384: |
          -----BEGIN PRIVATE KEY-----
          MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDBLwv3i5LDz9b++O0iw
          QAit/Uq7L5PWPgKN99wCm8xkZnuyqWujXW4wvlVUVlZWgh2hZANiAAT0+RXKE31c
          VxdYazaVopY50/nV9c18uRdqoENBvtxuD6oDtJtU6oCS/Htkd8JEArTQ9ZHqq144
          yRjuc3d2CqvJmEA/lzIBk9wnz+lghFhvB4TkSHvvLyEBc9DZvhb4EEQ=
          -----END PRIVATE KEY-----
        ecdsa_secp521r1_sha512: |
          -----BEGIN PRIVATE KEY-----
          MIHuAgEAMBAGByqGSM49AgEGBSuBBAAjBIHWMIHTAgEBBEIBiaEARm5BMaRct1xj
          MlemUHijWGAoHtNMhSttSr4jo0WxMwfMnvnDQJSlO2Zs4Tzum2j5eO34EHu6MUrv
          qquZYwyhgYkDgYYABAHuvCV/+gJitvAbDwgrBHZJ41oy8Lc+wPIM7Yp6s/vTzTsG
          Klo7aMdkx6DUjv/56tVD9bZNulFAjwS8xoIyWg8NSAE1ofo8CBvN1XGZOWuMYjEh
          zLrZADduEnOvayw5sEvm135WC0vWjPJaYwKZPdDIXUz9ILJPgNe3gEUvHsDEXvdX
          lw==
          -----END PRIVATE KEY-----
    rabbitmq:
      username: {{ .Values.rabbitmqUsername }}
      password: {{ .Values.rabbitmqPassword }}
  tests:
    {{- if .Values.uploadXml }}
    config:
      uploadXml:
        baseUrl: {{ .Values.uploadXml.baseUrl }}
    secrets:
      uploadXmlAwsAccessKeyId: {{ .Values.uploadXml.awsAccessKeyId }}
      uploadXmlAwsSecretAccessKey: {{ .Values.uploadXml.awsSecretAccessKey }}
    {{- end }}

gundeck:
  replicaCount: 1
  imagePullPolicy: {{ .Values.imagePullPolicy }}
  resources:
    requests: {}
    limits:
      memory: 1024Mi
  config:
    cassandra:
      host: {{ .Values.cassandraHost }}
      replicaCount: 1
    {{- if .Values.useK8ssandraSSL.enabled }}
      tlsCaSecretRef:
          name: "cassandra-jks-keystore"
          key: "ca.crt"
    {{- end }}
    redis:
      host: redis-ephemeral-master
      connectionMode: master
      enableTls: true
      tlsCaSecretRef:
        name: "redis-certificate"
        key: "ca.crt"
    aws:
      account: "123456789012"
      region: eu-west-1
      arnEnv: integration
      queueName: integration-gundeck-events
      sqsEndpoint: http://fake-aws-sqs:4568
      snsEndpoint: http://fake-aws-sns:4575
    disabledAPIVersions: []
    setMaxConcurrentNativePushes:
      hard: 30
      soft: 10
  secrets:
    awsKeyId: dummykey
    awsSecretKey: dummysecret
    redisPassword: very-secure-redis-master-password
  tests:
    {{- if .Values.uploadXml }}
    config:
      uploadXml:
        baseUrl: {{ .Values.uploadXml.baseUrl }}
    {{- end }}
    secrets:
      {{- if .Values.uploadXml }}
      uploadXmlAwsAccessKeyId: {{ .Values.uploadXml.awsAccessKeyId }}
      uploadXmlAwsSecretAccessKey: {{ .Values.uploadXml.awsSecretAccessKey }}
      {{- end }}
      redisAdditionalWritePassword: very-secure-redis-master-password-2

nginz:
  replicaCount: 1
  imagePullPolicy: {{ .Values.imagePullPolicy }}
  nginx_conf:
    env: staging
    external_env_domain: zinfra.io
    # NOTE: Web apps are disabled by default
    allowlisted_origins: []
    randomport_allowlisted_origins: [] # default is empty by intention
    rate_limit_reqs_per_user: "10r/s"
    rate_limit_reqs_per_addr: "100r/s"
  secrets:
    basicAuth: "whatever"
    zAuth:
      # this must match the key in brig!
      publicKeys: 0UW38se1yeoc5bVNEvf5LyrHWGZkyvcGTVilK2geGdU=
    oAuth:
      publicKeys: |
        {
          "kty": "OKP",
          "crv": "Ed25519",
          "x": "mhP-NgFw3ifIXGZqJVB0kemt9L3BtD5P8q4Gah4Iklc"
        }
proxy:
  replicaCount: 1
  imagePullPolicy: {{ .Values.imagePullPolicy }}
  secrets:
    proxy_config: |-
      secrets {
              youtube    = "..."
              googlemaps = "..."
              soundcloud = "..."
              giphy      = "..."
              spotify    = "Basic ..."
       }
  config:
    disabledAPIVersions: []
spar:
  replicaCount: 1
  imagePullPolicy: {{ .Values.imagePullPolicy }}
  resources:
    requests: {}
    limits:
      memory: 1024Mi
  config:
    tlsDisableCertValidation: true
    cassandra:
      host: {{ .Values.cassandraHost }}
    {{- if .Values.useK8ssandraSSL.enabled }}
      tlsCaSecretRef:
          name: "cassandra-jks-keystore"
          key: "ca.crt"
    {{- end }}
    logLevel: Debug
    domain: zinfra.io
    appUri: http://spar:8080/
    ssoUri: http://spar:8080/sso
    maxttlAuthreq: 5
    maxttlAuthresp: 7200
    maxScimTokens: 2
    contacts:
    - type: ContactSupport
      company: Example Company
      email: email:backend+spar@wire.com
    disabledAPIVersions: []
  tests:
    {{- if .Values.uploadXml }}
    config:
      uploadXml:
        baseUrl: {{ .Values.uploadXml.baseUrl }}
    secrets:
      uploadXmlAwsAccessKeyId: {{ .Values.uploadXml.awsAccessKeyId }}
      uploadXmlAwsSecretAccessKey: {{ .Values.uploadXml.awsSecretAccessKey }}
    {{- end }}

federator:
  replicaCount: 1
  resources:
    requests: {}
  imagePullPolicy: {{ .Values.imagePullPolicy }}
  remoteCAContents: {{ .Values.federationCACertificate | quote }}
  tls:
    useCertManager: true
    useSharedFederatorSecret: true

  config:
    optSettings:
      useSystemCAStore: false
    logLevel: Debug
  tests:
    {{- if .Values.uploadXml }}
    config:
      uploadXml:
        baseUrl: {{ .Values.uploadXml.baseUrl }}
    secrets:
      uploadXmlAwsAccessKeyId: {{ .Values.uploadXml.awsAccessKeyId }}
      uploadXmlAwsSecretAccessKey: {{ .Values.uploadXml.awsSecretAccessKey }}
    {{- end }}

background-worker:
  replicaCount: 1
  resources:
    requests: {}
  imagePullPolicy: {{ .Values.imagePullPolicy }}
  config:
    enableFederation: true
    backendNotificationPusher:
      pushBackoffMinWait: 1000 # 1ms
      pushBackoffMaxWait: 500000 # 0.5s
      remotesRefreshInterval: 1000000 # 1s
    rabbitmq:
      port: 5671
      adminPort: 15671
      enableTls: true
      insecureSkipVerifyTls: false
      tlsCaSecretRef:
        name: rabbitmq-certificate
        key: "ca.crt"
  secrets:
    rabbitmq:
      username: {{ .Values.rabbitmqUsername }}
      password: {{ .Values.rabbitmqPassword }}

integration:
  ingress:
    class: "nginx-{{ .Release.Namespace }}"
  config:
    cassandra:
      host: {{ .Values.cassandraHost }}
      port: 9042
      replicationFactor: 1
      {{- if .Values.useK8ssandraSSL.enabled }}
      tlsCaSecretRef:
        name: cassandra-jks-keystore
        key: ca.crt
      {{- end }}
    elasticsearch:
      tlsCaSecretRef:
        name: "elasticsearch-ephemeral-certificate"
        key: "ca.crt"
    redis:
      tlsCaSecretRef:
        name: "redis-certificate"
        key: "ca.crt"
    rabbitmq:
      tlsCaSecretRef:
        name: "rabbitmq-certificate"
        key: "ca.crt"
    {{- if .Values.uploadXml }}
    uploadXml:
      baseUrl: {{ .Values.uploadXml.baseUrl }}
    {{- end }}
  secrets:
    {{- if .Values.uploadXml }}
    uploadXmlAwsAccessKeyId: {{ .Values.uploadXml.awsAccessKeyId }}
    uploadXmlAwsSecretAccessKey: {{ .Values.uploadXml.awsSecretAccessKey }}
    {{- end }}
    redisPassword: very-secure-redis-master-password
  tls:
    caNamespace: wire-federation-v0

backoffice:
  tests:
    {{- if .Values.uploadXml }}
    config:
      uploadXml:
        baseUrl: {{ .Values.uploadXml.baseUrl }}
    secrets:
      uploadXmlAwsAccessKeyId: {{ .Values.uploadXml.awsAccessKeyId }}
      uploadXmlAwsSecretAccessKey: {{ .Values.uploadXml.awsSecretAccessKey }}
    {{- end }}
