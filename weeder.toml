# weeder intro and further reading: https://github.com/ocharles/weeder?tab=readme-ov-file#weeder

roots = [ # may of the entries here are about general-purpose module
          # interfaces that make sense as a whole, but are *currently*
          # only used in part.  it's possible that we should remove
          # those entries here and extend the tests to cover them.

         "^API.Cargohold.getFederationAsset", # FUTUREWORK: write tests that need this!
         "^API.Cargohold.uploadAssetV3", # FUTUREWORK: write tests that need this!
         "^API.Galley.consentToLegalHold",  # FUTUREWORK: write tests that need this!
         "^API.Galley.enableLegalHold",  # FUTUREWORK: write tests that need this!
         "^API.Galley.getLegalHoldStatus",  # FUTUREWORK: write tests that need this!
         "^API.GalleyInternal.putTeamMember",
         "^API.MLS.Util.clientKeyPair",
         "^API.MLS.Util.getCurrentGroupId",
         "^API.MLS.Util.getKeyPackageCount",
         "^API.MLS.Util.getKeyPair",
         "^API.Nginz.*$", # FUTUREWORK: consider using everything or cleaning up.
         "^API.Search._testOrderName",
         "^API.Team.Util.*$", # FUTUREWORK: Consider whether unused utility functions should be kept.
         "^Bilge.*$",
         "^Cannon.run$",
         "^Cassandra.Helpers.toOptionFieldName",
         "^Cassandra.QQ.sql$",
         "^Data.ETag._OpaqueDigest",
         "^Data.ETag._StrictETag",
         "^Data.ETag._WeakETag",
         "^Data.ETag.opaqueDigest",
         "^Data.ETag.opaqueMD5",
         "^Data.ETag.opaqueSHA1",
         "^Data.ETag.strictETag",
         "^Data.ETag.weakETag",
         "^Data.Qualified.isLocal",
         "^Data.Range.*$",
         "^Data.Range.rappend",
         "^Data.Range.rcons",
         "^Data.Range.rinc",
         "^Data.Range.rsingleton",
         "^Data.Schema.fieldWithDocModifierF$",
         "^Data.ZAuth.Validation.*$",
         "^Galley.Cassandra.FeatureTH.generateSOPInstances$",
         "^Galley.Cassandra.FeatureTH.generateTupleP$",
         "^Galley.Types.Teams.canSeePermsOf", # TODO: figure out why weeder is confused by let bindings with curried infix notation
         "^Galley.Types.UserList.ulDiff$",
         "^Gundeck.Monad.runGundeck$",
         "^Gundeck.run$",
         "^HTTP2.Client.Manager.*$",
         "^Imports.getChar",
         "^Imports.getContents",
         "^Imports.interact",
         "^Imports.putChar",
         "^Imports.readIO",
         "^Imports.readLn",
         "^Imports.todo",
         "^Main.debugMainDebugExportFull", # move-team
         "^Main.debugMainExport", # move-team
         "^Main.debugMainImport", # move-team
         "^Main.main$",
         "^Network.Wai.Utilities.Request.parseBody$",
         "^Network.Wai.Utilities.Server.route$",
         "^Network.Wai.Utilities.ZAuth.*$",
         "^Notifications.*$", # new integration tests
         "^ParseSchema._printAllTables",
         "^ParseSchema.debug",
         "^ParseSchema.debugwrite",
         "^ParseSchema.projectFile",
         "^Paths_.*",
         "^Proto.Mls_Fields.commit",
         "^Proto.Mls_Fields.groupInfo",
         "^Proto.Mls_Fields.groupInfoBundle",
         "^Proto.Mls_Fields.groupInfoType",
         "^Proto.Mls_Fields.ignoreAll",
         "^Proto.Mls_Fields.ignoreOnly",
         "^Proto.Mls_Fields.isInline",
         "^Proto.Mls_Fields.maybe'blob",
         "^Proto.Mls_Fields.maybe'ignoreAll",
         "^Proto.Mls_Fields.maybe'ignoreOnly",
         "^Proto.Mls_Fields.maybe'isInline",
         "^Proto.Mls_Fields.maybe'nativePush",
         "^Proto.Mls_Fields.maybe'reportAll",
         "^Proto.Mls_Fields.maybe'reportOnly",
         "^Proto.Mls_Fields.maybe'transient",
         "^Proto.Mls_Fields.maybe'welcome",
         "^Proto.Mls_Fields.nativePriority",
         "^Proto.Mls_Fields.ratchetTreeType",
         "^Proto.Mls_Fields.reportAll",
         "^Proto.Mls_Fields.reportMissing",
         "^Proto.Mls_Fields.reportOnly",
         "^Proto.Mls_Fields.vec'clients",
         "^Proto.Mls_Fields.vec'entries",
         "^Proto.Mls_Fields.vec'recipients",
         "^Proto.Mls_Fields.vec'reportMissing",
         "^Proto.Mls_Fields.vec'userIds",
         "^Proto.Mls_Fields.welcome",
         "^Proto.Otr._QualifiedNewOtrMessage'IgnoreAll",
         "^Proto.Otr._QualifiedNewOtrMessage'IgnoreOnly",
         "^Proto.Otr._QualifiedNewOtrMessage'ReportAll",
         "^Proto.Otr._QualifiedNewOtrMessage'ReportOnly",
         "^Proto.Otr_Fields.ignoreAll",
         "^Proto.Otr_Fields.ignoreOnly",
         "^Proto.Otr_Fields.isInline",
         "^Proto.Otr_Fields.maybe'blob",
         "^Proto.Otr_Fields.maybe'ignoreAll",
         "^Proto.Otr_Fields.maybe'ignoreOnly",
         "^Proto.Otr_Fields.maybe'isInline",
         "^Proto.Otr_Fields.maybe'nativePush",
         "^Proto.Otr_Fields.maybe'reportAll",
         "^Proto.Otr_Fields.maybe'reportOnly",
         "^Proto.Otr_Fields.maybe'transient",
         "^Proto.Otr_Fields.nativePriority",
         "^Proto.Otr_Fields.reportAll",
         "^Proto.Otr_Fields.reportMissing",
         "^Proto.Otr_Fields.reportOnly",
         "^Proto.Otr_Fields.vec'clients",
         "^Proto.Otr_Fields.vec'entries",
         "^Proto.Otr_Fields.vec'recipients",
         "^Proto.Otr_Fields.vec'reportMissing",
         "^Proto.Otr_Fields.vec'userIds",
         "^Proto.TeamEvents_Fields.currency",
         "^Proto.TeamEvents_Fields.vec'billingUser",
         "^Proxy.run$",
         "^Run.main$",
         "^Run.main$",
         "^Spar.Sem.AReqIDStore.Mem.*$", # FUTUREWORK: @fisx can we delete this?
         "^Spar.Sem.AssIDStore.Mem.*$", # FUTUREWORK: @fisx can we delete this?
         "^Spar.Sem.ScimTokenStore.Mem.*$", # FUTUREWORK: @fisx can we delete this?
         "^Spar.Sem.VerdictFormatStore.Mem.*$", # FUTUREWORK: @fisx can we delete this?
         "^Spec.main$",
         "^Stern.App.runHandler$",
         "^System.Logger.Extended.runWithLogger$",
         "^Test.Cargohold.API.Util.shouldMatchALittle",
         "^Test.Cargohold.API.Util.shouldMatchLeniently",
         "^Test.Cargohold.API.Util.shouldMatchSloppily",
         "^Test.Data.Schema.detailSchema",
         "^Test.Data.Schema.userSchemaWithDefaultName",
         "^Test.Data.Schema.userSchemaWithDefaultName'",
         "^Test.Federator.JSON.deriveJSONOptions", # This is used inside an instance derivation via TH
         "^Test.Wire.API.Golden.Run.main$",
         "^TestSetup.runFederationClient",
         "^TestSetup.viewCargohold",
         "^Testlib.App.*$", # FUTUREWORK: See how we can have weeder parse operators in the config file.
         "^Testlib.Cannon.awaitAtLeastNMatches",
         "^Testlib.Cannon.awaitAtLeastNMatchesResult",
         "^Testlib.Cannon.awaitNToMMatches",
         "^Testlib.Cannon.awaitNToMMatchesResult",
         "^Testlib.Cannon.prettyAwaitAtLeastResult",
         "^Testlib.Cannon.printAwaitAtLeastResult",
         "^Testlib.Cannon.printAwaitResult",
         "^Testlib.JSON.member",
         "^Testlib.JSON.printJSON",
         "^Testlib.JSON.traceJSON",
         "^Testlib.Prelude.*$", # FUTUREWORK: consider making them individually
         "^Testlib.Printing.gray",
         "^Testlib.Printing.hline",
         "^Testlib.Run.main$",
         "^Testlib.Run.mainI$",
         "^Testlib.RunServices.main$",
         "^ThreadBudget.extractLogHistory",
         "^Util.SuffixNamer.*",
         "^Util.assertOne",
         "^Util.randomActivationCode",
         "^Util.zClient",
         "^Web.Scim.*$",
         "^Web.Scim.Client.deleteGroup",
         "^Web.Scim.Client.deleteUser",
         "^Web.Scim.Client.getGroup",
         "^Web.Scim.Client.getGroups",
         "^Web.Scim.Client.getSchemas",
         "^Web.Scim.Client.getUser",
         "^Web.Scim.Client.getUsers",
         "^Web.Scim.Client.patchGroup",
         "^Web.Scim.Client.patchUser",
         "^Web.Scim.Client.postGroup",
         "^Web.Scim.Client.postUser",
         "^Web.Scim.Client.putGroup",
         "^Web.Scim.Client.resourceTypes",
         "^Web.Scim.Client.schema",
         "^Web.Scim.Client.scimClients",
         "^Web.Scim.Client.scimClients",
         "^Web.Scim.Client.spConfig",
         "^Web.Scim.Test.Util.getField",
         "^Web.Scim.Test.Util.put'",
         "^Web.Scim.Test.Util.scim",
         "^Web.Scim.Test.Util.shouldEventuallyRespondWith",
         "^Wire.API.MLS.Serialisation.traceMLS", # Debug
         "^Wire.API.Password.hashPasswordScrypt$", # Used in testing
         "^Wire.API.Password.mkSafePasswordScrypt$", # Used in testing
         "^Wire.Sem.Concurrency.IO.performConcurrency",
         "^Wire.Sem.Logger.fatal",
         "^Wire.Sem.Metrics.incGauge$" # Used in wai-utilities
        ]
type-class-roots = true  # `root-instances` is more precise, but requires more config maintenance.

# FUTUREWORK: unused-types = true
# FUTUREWORK: type-class-roots = false, and see how bad it gets
